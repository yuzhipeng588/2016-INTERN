//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Ship Project\CCS_HUST_HFHZ_CAD\CCS_HUST_HFHZ_CAD_7_1_FormatPainter.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Nero
//              Version: NX 10
//              Date: 03-03-2016  (Format: mm-dd-yyyy)
//              Time: 13:57 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "CCS_HUST_HFHZ_CAD_7_1_FormatPainter.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

void CreatSphere();

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theSession) = NULL;
UI *(CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
CCS_HUST_HFHZ_CAD_7_1_FormatPainter::CCS_HUST_HFHZ_CAD_7_1_FormatPainter()
{
    try
    {
        // Initialize the NX Open C++ API environment
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theSession = NXOpen::Session::GetSession();
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI = UI::GetUI();
        theDlxFileName = "CCS_HUST_HFHZ_CAD_7_1_FormatPainter.dlx";
        theDialog = CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &CCS_HUST_HFHZ_CAD_7_1_FormatPainter::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &CCS_HUST_HFHZ_CAD_7_1_FormatPainter::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &CCS_HUST_HFHZ_CAD_7_1_FormatPainter::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &CCS_HUST_HFHZ_CAD_7_1_FormatPainter::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &CCS_HUST_HFHZ_CAD_7_1_FormatPainter::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
CCS_HUST_HFHZ_CAD_7_1_FormatPainter::~CCS_HUST_HFHZ_CAD_7_1_FormatPainter()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    CCS_HUST_HFHZ_CAD_7_1_FormatPainter *theCCS_HUST_HFHZ_CAD_7_1_FormatPainter = NULL;
	
    try
    {
        theCCS_HUST_HFHZ_CAD_7_1_FormatPainter = new CCS_HUST_HFHZ_CAD_7_1_FormatPainter();
        // The following method shows the dialog immediately
        theCCS_HUST_HFHZ_CAD_7_1_FormatPainter->Show();
		
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    
    if(theCCS_HUST_HFHZ_CAD_7_1_FormatPainter != NULL)
    {
        delete theCCS_HUST_HFHZ_CAD_7_1_FormatPainter;
        theCCS_HUST_HFHZ_CAD_7_1_FormatPainter = NULL;
    }
	
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int CCS_HUST_HFHZ_CAD_7_1_FormatPainter::Show()
{
	
    try
    {
        theDialog->Show();
		
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void CCS_HUST_HFHZ_CAD_7_1_FormatPainter::initialize_cb()
{
	
    try
    {
        group01 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group01"));
        selection0 = dynamic_cast<NXOpen::BlockStyler::SelectObject*>(theDialog->TopBlock()->FindBlock("selection0"));
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        toggle0 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle0"));
        toggle01 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle01"));
        toggle02 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle02"));
        toggle03 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle03"));
        toggle04 = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggle04"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void CCS_HUST_HFHZ_CAD_7_1_FormatPainter::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int CCS_HUST_HFHZ_CAD_7_1_FormatPainter::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		std::vector<NXOpen::NXObject *> objects1(1);

		//NXOpen::Features::Block *block1(dynamic_cast<NXOpen::Features::Block *>(workPart->Features()->FindObject("BLOCK(1)")));

		//PropertyList *prop = selection0->GetProperties();
		//std::vector<TaggedObject* > taggedBody1 = prop->GetTaggedObjectVector("SelectedObjects");
		//delete prop;
		//prop = NULL;

		std::vector<TaggedObject* > taggedBody1 = selection0->GetSelectedObjects();
		NXOpen::Body *objectBody1(dynamic_cast<NXOpen::Body*>(taggedBody1[0]));

		//NXOpen::Features::Block *bodyFeature1 = dynamic_cast<NXOpen::Features::Block * >(objectBody1);
		//NXOpen::Features::Block *bodyFeature1 = dynamic_cast<NXOpen::Features::Block * >(objectBody1);

		//objectBody1->SetAttribute("title", "fdfaf");
		//taggedBody1[0]->SetAttribute("title", "fdfaf");

		objects1[0] = objectBody1;
		//objects1[0] = block1;
		NXOpen::AttributePropertiesBuilder *attributePropertiesBuilder1;
		attributePropertiesBuilder1 = theSession->AttributeManager()->CreateAttributePropertiesBuilder(workPart, objects1, NXOpen::AttributePropertiesBuilder::OperationTypeNone);


		attributePropertiesBuilder1->SetAttributeObjects(objects1);
		attributePropertiesBuilder1->SetTitle("test4");
		attributePropertiesBuilder1->SetStringValue("4444");
		NXOpen::NXObject *nXObject1;
		nXObject1 = attributePropertiesBuilder1->Commit();

		attributePropertiesBuilder1->Destroy();
		
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int CCS_HUST_HFHZ_CAD_7_1_FormatPainter::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == selection0)
        {
        //---------Enter your code here-----------

        }
        else if(block == toggle0)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle01)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle02)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle03)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggle04)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int CCS_HUST_HFHZ_CAD_7_1_FormatPainter::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        CCS_HUST_HFHZ_CAD_7_1_FormatPainter::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* CCS_HUST_HFHZ_CAD_7_1_FormatPainter::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
void CreatSphere(void)
{
	NXOpen::Session *theSession = NXOpen::Session::GetSession();
	NXOpen::Part *workPart(theSession->Parts()->Work());
	NXOpen::Features::Feature *nullNXOpen_Features_Feature(NULL);
	NXOpen::Features::CylinderBuilder *cylinderBuilder1;
	cylinderBuilder1 = workPart->Features()->CreateCylinderBuilder(nullNXOpen_Features_Feature);
	cylinderBuilder1->BooleanOption()->SetType(NXOpen::GeometricUtilities::BooleanOperation::BooleanTypeCreate);
	cylinderBuilder1->Diameter()->SetRightHandSide("100");
	cylinderBuilder1->Height()->SetRightHandSide("100");
	NXOpen::NXObject *nXObject1;
	nXObject1 = cylinderBuilder1->Commit();
	cylinderBuilder1->Destroy();

}
